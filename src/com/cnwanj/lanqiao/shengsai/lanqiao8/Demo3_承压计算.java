package com.cnwanj.lanqiao.shengsai.lanqiao8;

import java.util.Arrays;

/**
 * 标题：承压计算
 *
 * X星球的高科技实验室中整齐地堆放着某批珍贵金属原料。
 *
 * 每块金属原料的外形、尺寸完全一致，但重量不同。
 * 金属材料被严格地堆放成金字塔形。
 *
 *                              7
 *                             5 8
 *                            7 8 8
 *                           9 2 7 2
 *                          8 1 4 9 1
 *                         8 1 8 8 4 1
 *                        7 9 6 1 4 5 4
 *                       5 6 5 5 6 9 5 6
 *                      5 5 4 7 9 3 5 5 1
 *                     7 5 7 9 7 4 7 3 3 1
 *                    4 6 4 5 5 8 8 3 2 4 3
 *                   1 1 3 3 1 6 6 5 5 4 4 2
 *                  9 9 9 2 1 9 1 9 2 9 5 7 9
 *                 4 3 3 7 7 9 3 6 1 3 8 8 3 7
 *                3 6 8 1 5 3 9 5 8 3 8 1 8 3 3
 *               8 3 2 3 3 5 5 8 5 4 2 8 6 7 6 9
 *              8 1 8 1 8 4 6 2 2 1 7 9 4 2 3 3 4
 *             2 8 4 2 2 9 9 2 8 3 4 9 6 3 9 4 6 9
 *            7 9 7 4 9 7 6 6 2 8 9 4 1 8 1 7 2 1 6
 *           9 2 8 6 4 2 7 9 5 4 1 2 5 1 7 3 9 8 3 3
 *          5 2 1 6 7 9 3 2 8 9 5 5 6 6 6 2 1 8 7 9 9
 *         6 7 1 8 8 7 5 3 6 5 4 7 3 4 6 7 8 1 3 2 7 4
 *        2 2 6 3 5 3 4 9 2 4 5 7 6 6 3 2 7 2 4 8 5 5 4
 *       7 4 4 5 8 3 3 8 1 8 6 3 2 1 6 2 6 4 6 3 8 2 9 6
 *      1 2 4 1 3 3 5 3 4 9 6 3 8 6 5 9 1 5 3 2 6 8 8 5 3
 *     2 2 7 9 3 3 2 8 6 9 8 4 4 9 5 8 2 6 3 4 8 4 9 3 8 8
 *    7 7 7 9 7 5 2 7 9 2 5 1 9 2 6 5 3 9 3 5 7 3 5 4 2 8 9
 *   7 7 6 6 8 7 5 5 8 2 4 7 7 4 7 2 6 9 2 1 8 2 9 8 5 7 3 6
 *  5 9 4 5 5 7 5 5 6 3 5 3 9 5 8 9 5 4 1 2 6 1 4 3 5 3 2 4 1
 * X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X
 *
 * 其中的数字代表金属块的重量（计量单位较大）。
 * 最下一层的X代表30台极高精度的电子秤。
 *
 * 假设每块原料的重量都十分精确地平均落在下方的两个金属块上，
 * 最后，所有的金属块的重量都严格精确地平分落在最底层的电子秤上。
 * 电子秤的计量单位很小，所以显示的数字很大。
 *
 * 工作人员发现，其中读数最小的电子秤的示数为：2086458231
 *
 * 请你推算出：读数最大的电子秤的示数为多少？
 *
 * 注意：需要提交的是一个整数，不要填写任何多余的内容。
 *
 * 【答案】
 * 72665192664
 */
public class Demo3_承压计算 {
    static String s =
            "7\n" +
            "5 8\n" +
            "7 8 8\n" +
            "9 2 7 2\n" +
            "8 1 4 9 1\n" +
            "8 1 8 8 4 1\n" +
            "7 9 6 1 4 5 4\n" +
            "5 6 5 5 6 9 5 6\n" +
            "5 5 4 7 9 3 5 5 1\n" +
            "7 5 7 9 7 4 7 3 3 1\n" +
            "4 6 4 5 5 8 8 3 2 4 3\n" +
            "1 1 3 3 1 6 6 5 5 4 4 2\n" +
            "9 9 9 2 1 9 1 9 2 9 5 7 9\n" +
            "4 3 3 7 7 9 3 6 1 3 8 8 3 7\n" +
            "3 6 8 1 5 3 9 5 8 3 8 1 8 3 3\n" +
            "8 3 2 3 3 5 5 8 5 4 2 8 6 7 6 9\n" +
            "8 1 8 1 8 4 6 2 2 1 7 9 4 2 3 3 4\n" +
            "2 8 4 2 2 9 9 2 8 3 4 9 6 3 9 4 6 9\n" +
            "7 9 7 4 9 7 6 6 2 8 9 4 1 8 1 7 2 1 6\n" +
            "9 2 8 6 4 2 7 9 5 4 1 2 5 1 7 3 9 8 3 3\n" +
            "5 2 1 6 7 9 3 2 8 9 5 5 6 6 6 2 1 8 7 9 9\n" +
            "6 7 1 8 8 7 5 3 6 5 4 7 3 4 6 7 8 1 3 2 7 4\n" +
            "2 2 6 3 5 3 4 9 2 4 5 7 6 6 3 2 7 2 4 8 5 5 4\n" +
            "7 4 4 5 8 3 3 8 1 8 6 3 2 1 6 2 6 4 6 3 8 2 9 6\n" +
            "1 2 4 1 3 3 5 3 4 9 6 3 8 6 5 9 1 5 3 2 6 8 8 5 3\n" +
            "2 2 7 9 3 3 2 8 6 9 8 4 4 9 5 8 2 6 3 4 8 4 9 3 8 8\n" +
            "7 7 7 9 7 5 2 7 9 2 5 1 9 2 6 5 3 9 3 5 7 3 5 4 2 8 9\n" +
            "7 7 6 6 8 7 5 5 8 2 4 7 7 4 7 2 6 9 2 1 8 2 9 8 5 7 3 6\n" +
            "5 9 4 5 5 7 5 5 6 3 5 3 9 5 8 9 5 4 1 2 6 1 4 3 5 3 2 4 1";
    public static void main(String[] args) {
        double[][] arr = new double[30][30];
        String[] a = s.split("\\n");
        String[][] b = new String[29][30];
        for (int i = 0; i < a.length; i++) {
            b[i] = a[i].split(" ");
        }
        // 赋值给double类型的数组
        for (int i = 0; i < b.length; i++) {
            for (int j = 0; j < b[i].length; j++) {
                arr[i][j] = Double.parseDouble(b[i][j]);
            }
            //System.out.println(Arrays.toString(arr[i]));
        }
        double avg;
        for (int i = 0; i < 29; i++) {
            for (int j = 0; j <= i; j++) {
                // 将当前的金属重量平均
                avg = arr[i][j] / 2.0;
                // 分给下一层的两个金属
                arr[i+1][j] += avg;
                arr[i+1][j+1] += avg;
//                 System.out.print(arr[i][j] + " ");
            }
//            System.out.println();
        }
        for (int i = 0; i < arr.length; i++) {
            System.out.println(Arrays.toString(arr[i]));
        }
        // 定义最小值和最大值
        double max = Double.MIN_VALUE;
        double min = Double.MAX_VALUE;
        // 遍历最后一行，求出最大值和最小值
        for (int i = 0; i < 30; i++) {
            if (arr[29][i] < min) {
                min = arr[29][i];
            }
            if (arr[29][i] > max) {
                max = arr[29][i];
            }
        }

        System.out.println(min);
        System.out.println(max);
        // maxVal = (max * minVal) / min
        // 7.2665192664E10：E后面表示10^10
        System.out.println((max * 2086458231.0) / min);

    }
}
